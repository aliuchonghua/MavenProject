<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--开启spring的注解-->
    <context:annotation-config></context:annotation-config>
    <!--制定spring扫描的包，此处可以有多行-->
    <context:component-scan base-package="org.westos.web01.SpringAOP"/>
    <context:component-scan base-package="org.westos.web01.servlet"/>
    <context:component-scan base-package="org.westos.web01.aop"/>
    <context:component-scan base-package="org.westos.web01.annotation"/>
    <context:component-scan base-package="com.westos.web02.controller"/>

    <!--开启aop注解-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

    <context:property-placeholder location="classpath:jdbc.properties" file-encoding="utf-8"/>
    <!--使用注解配置bean需要导入的两个包-->
    <bean id="requestMappinghandlemapping"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean id="requestMappingHandlerAdapter"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>

    <!--springmvc的配置-->
    <bean id="simplehandlemapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="urlMap">
            <map>
                <entry key="/hellob.do" value="hellob"/>
            </map>
        </property>
    </bean>
    <bean id="beannamehandlemapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

    <bean id="servletHandlerAdapter" class="org.springframework.web.servlet.handler.SimpleServletHandlerAdapter">

    </bean>
    <bean id="simpleControllerHandlerAdapter"
          class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--指定jsp的前缀，即从哪个路径开始-->
        <property name="prefix" value=""/>
        <!--指定后缀-->
        <property name="suffix" value=".jsp"/>
        <property name="order" value="1"/>
    </bean>

    <bean id="/myServlet.do" class="org.westos.web01.servlet.MyServlet"/>
    <bean id="hellob" class="org.westos.web01.controller.BeanController">
        <property name="student" ref="stu"/>
    </bean>
    <!--将bean映射为url-->
    <bean id="/hello.do" class="org.westos.web01.controller.BeanController">
        <property name="student" ref="stu"/>
    </bean>
    <bean id="/hello.wst" class="org.westos.web01.controller.BeanController">
        <property name="student" ref="stu"/>
    </bean>
    <bean id="beanNameHandlerMapping" class="org.westos.web01.servlet.handlermapping.WstBeanNameHandlerMapping"/>
    <bean id="wstControllerHandler" class="org.westos.web01.servlet.handleradapter.WstControllerHandlerAdapter"/>
    <bean id="jspViewerResolver" class="org.westos.web01.servlet.viewresolver.WstJspViewerResolver"/>

    <bean id="myaware" class="org.westos.web01.Util.MyAware"/>

    <bean id="aobj" class="org.westos.web01.IOC模型.A">
        <property name="a">
            <bean class="org.westos.web01.IOC模型.AInterfaceImpl1"/>
        </property>
    </bean>
    <bean id="stu" scope="singleton" class="org.westos.web01.bean.Student">
        <property name="xuhao" value="NO.001"></property>
        <property name="xingming" value="张三"></property>
        <property name="aihao">
            <list>
                <value>看电影</value>
                <value>购物</value>
            </list>
        </property>
        <property name="chengji">
            <map>
                <entry key="english" value="90"></entry>
                <entry key="math" value="80"></entry>
            </map>
        </property>
    </bean>
    <!--结合Mybatis-->
    <!--

        <bean id="myaware" class="org.westos.web01.Util.MyAware"/>
        &lt;!&ndash;另外两种初始化方式&ndash;&gt;
        <bean id="stu4" class="org.westos.web01.factory.StudentFactory" factory-method="create"></bean>
        <bean id="stu5" class="org.westos.web01.factory.StudentFactoryBean"></bean>
    -->


    <!--FactoryBean的创建方式-->
    <!--创建HashMap-->
    <bean id="mymap" class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry key="井杰" value="001"></entry>
                <entry key="田伟" value="002"></entry>
            </map>
        </property>
        <!--设定创建的是HashMap类型-->
        <property name="targetMapClass" value="java.util.HashMap"/>
    </bean>
    <!--创建list-->
    <bean id="mylist" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </list>
        </property>
        <!--设置为创建的是ArrayList类型-->
        <property name="targetListClass" value="java.util.ArrayList"/>
    </bean>
    <!--自己实现的mybatis与spring的整合-->
    <!--<bean id="sqlSessionFactory" class="org.westos.web01.factory.MybatisFactoryBean">
        <property name="resource" value="mybatis.xml"/>
    </bean>
    <bean id="haohandao" class="org.westos.web01.factory.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <property name="targetMapClass" value="org.westos.web01.dao.HaohanDao"/>
    </bean>-->
    <!--mybatis与spring的整合配置-->
    <!--   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init">
           <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
           <property name="url" value="jdbc:mysql://localhost:3306/javaweb?useUnicode=true&amp;characterEncoding=utf-8"/>
           <property name="username" value="root"/>
           <property name="password" value="123456"/>
       </bean>
       <bean id="sqlSessionFactoryb" class="org.mybatis.spring.SqlSessionFactoryBean">
           &lt;!&ndash;数据源的配置&ndash;&gt;
           <property name="dataSource" ref="dataSource"/>
       </bean>

       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
           <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryb"/>
           &lt;!&ndash;dao所在的包&ndash;&gt;
           <property name="basePackage" value="org.westos.web01.dao"/>
       </bean>-->
    <!--aop配置方法列表-->
    <bean id="myPointCut" class="org.westos.web01.aop.MyPointCut">
        <property name="methodlist">
            <list>
                <value>org.westos.web01.aop.HelloInterface.sayHi</value>
            </list>
        </property>
    </bean>
    <!--SpringAOP-->
    <!--被代理类,是一个接口的实现类-->
    <bean id="helloInterface" class="org.westos.web01.aop.HelloInterfaceImpl"/>
    <!--配置advice代理执行的内容类-->
    <bean id="helloAdvice" class="org.westos.web01.SpringAOP.HelloAdvice"/>
    <bean id="mySpringAdvice" class="org.westos.web01.SpringAOP.MySpringAdvice"/>
    <!--代理类的配置-->
    <aop:config>
        <!--pointcut的配置-->
        <!--需要被代理执行的方法-->
        <aop:pointcut id="mycut" expression="execution(* org.westos.web01.aop.HelloInterface.say*(..))"/>
        <!--advice的配置-->
        <!--第一种实现方式-->
        <!--关联代理配置-->
        <!--<aop:advisor advice-ref="helloAdvice" pointcut-ref="mycut"/>-->
        <!--第二种实现方式-->
        <!--<aop:aspect id="asp" ref="mySpringAdvice">
            <aop:before method="doBefore" pointcut-ref="mycut"/>
            <aop:after-returning method="doAfter" pointcut-ref="mycut"/>
            <aop:around method="doAround" pointcut-ref="mycut"/>
        </aop:aspect>-->
    </aop:config>
</beans>